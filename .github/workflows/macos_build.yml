name: MacOS Build Steps

on: [push, pull_request]

jobs:
  build_macos:
    name: macOS Build
    runs-on: macos-11.0
    env:
      CCACHE_BASEDIR: ${{ github.workspace }}
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPRESS: true
      CCACHE_COMPRESSLEVEL: 9
      CCACHE_MAXSIZE: 200M

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Packages
        env:
          HOMEBREW_NO_INSTALL_CLEANUP: 1
          HOMEBREW_NO_ANALYTICS: 1
        run: |
          if ! brew install ccache; then
            brew update
            brew install ccache
          fi

      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: ~/deps
          key: macOS 10.13 x86_64 deps ${{ hashFiles('.github/workflows/scripts/macos/build-dependencies.sh') }}

      - name: Build Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: .github/workflows/scripts/macos/build-dependencies.sh

      - name: Cache MoltenVK
        id: cache-moltenvk
        uses: actions/cache@v3
        with:
          path: ~/moltenvk
          key: macOS x86_64 MoltenVK ${{ hashFiles('Externals/MoltenVK') }}

      - name: Build MoltenVK
        if: steps.cache-moltenvk.outputs.cache-hit != 'true'
        run: |
          MVK_VER="$(sed -nr 's/^.*set\(MOLTENVK_VERSION "([^"]+)".*$/\1/p' Externals/MoltenVK/CMakeLists.txt)"
          if [ -z "$MVK_VER" ]; then
            echo "::error::Failed to parse MoltenVK version from CMakeLists"
            exit 1
          fi
          git clone --depth 1 --branch "$MVK_VER" https://github.com/KhronosGroup/MoltenVK.git mvk-build
          pushd mvk-build
          git apply ../Externals/MoltenVK/patches/*.patch
          ./fetchDependencies --macos
          make macos
          mkdir -p "$HOME/moltenvk/lib/"
          lipo -thin x86_64 -output "$HOME/moltenvk/lib/libMoltenVK.dylib" Package/Release/MoltenVK/dylib/macOS/libMoltenVK.dylib
          popd
          rm -rf mvk-build

      # -- SETUP CCACHE - https://cristianadam.eu/20200113/speeding-up-c-plus-plus-github-actions-using-ccache/
      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        run: echo "timestamp=$(date -u "+%Y-%m-%d-%H;%M;%S")" >> $GITHUB_OUTPUT

      - name: Cache ccache cache
        uses: actions/cache@v3
        with:
          path: .ccache
          key: macOS 10.13 x86_64 ccache ${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: macOS 10.13 x86_64 ccache

      - name: Generate CMake Files
        env:
          CXXFLAGS: -fno-aligned-allocation
        run: |
          cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13 \
                -DCMAKE_PREFIX_PATH="$HOME/deps;$HOME/moltenvk" \
                -DCMAKE_BUILD_TYPE=Release \
                -DUSE_BUNDLED_MOLTENVK=OFF \
                -DMACOS_CODE_SIGNING=OFF \
                -DCMAKE_INTERPROCEDURAL_OPTIMIZATION=ON \
                -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
                -DCMAKE_DISABLE_PRECOMPILE_HEADERS=ON \
                -B build .

      - name: Build Dolphin
        working-directory: build
        run: |
          ccache -p
          ccache -s
          ccache -z
          make -j$(getconf _NPROCESSORS_ONLN) dolphin-emu
          ccache -s

      - name: Prepare Build Artifacts
        id: create-artifact
        env:
          EVENT_NAME: ${{ github.event_name }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_NUM: ${{ github.event.pull_request.number }}
          PR_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          TAG="$(git tag --points-at HEAD)"
          if [ ! -z "$TAG" ]; then
            SUFFIX="$TAG"
          elif [ "$EVENT_NAME" == "pull_request" ]; then
            PR_TITLE=$(echo "${PR_TITLE}" | tr -cd '[a-zA-Z0-9[:space:]]_-')
            SUFFIX="pr[$PR_NUM]-sha[$PR_SHA]-title[$PR_TITLE"
            SUFFIX=$(printf "%.99s]" "$SUFFIX")
          else
            SUFFIX="sha[$(git rev-parse --short HEAD)]"
          fi
          APPNAME="Dolphin-$SUFFIX"
          mv build/Binaries/Dolphin.app "$APPNAME.app"
          tar cvzf "$APPNAME.tar.gz" "$APPNAME.app"
          echo "name=$APPNAME" >> "$GITHUB_OUTPUT"

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.create-artifact.outputs.name }}
          path: "*.tar.gz"
